cmake_minimum_required(VERSION 3.20)

project(dependecies-build)

# Install and build dependencies locally
include(ExternalProject)
set(LOCAL_INSTALL_DIR ${CMAKE_BINARY_DIR}/local)
set_directory_properties(PROPERTIES EP_BASE ${CMAKE_BINARY_DIR}/base)

if(${CMAKE_VERSION} VERSION_GREATER_EQUAL "3.24.0")
    cmake_policy(SET CMP0135 NEW)
endif()

# Escape semicolons in CMAKE_OSX_ARCHITECTURES before passing to ExternalProject_Add
string(REPLACE ";" "$<SEMICOLON>" CMAKE_OSX_ARCHITECTURES_PACKED "${CMAKE_OSX_ARCHITECTURES}")

# ZLIB
ExternalProject_Add(
    ZLIB
    URL ${CMAKE_CURRENT_SOURCE_DIR}/third_party/zlib1213.zip
    CONFIGURE_HANDLED_BY_BUILD TRUE
    CMAKE_ARGS
    -DCMAKE_INSTALL_PREFIX:PATH=${LOCAL_INSTALL_DIR}
    -DCMAKE_PREFIX_PATH=${LOCAL_INSTALL_DIR}
    -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
    -DBUILD_SHARED_LIBS=OFF
    -DCMAKE_OSX_ARCHITECTURES=${CMAKE_OSX_ARCHITECTURES_PACKED}
    -DCMAKE_POSITION_INDEPENDENT_CODE=ON
)

# SQLite3
ExternalProject_Add(
    SQLITE3
    DEPENDS ZLIB
    URL ${CMAKE_CURRENT_SOURCE_DIR}/third_party/sqlite3
    CONFIGURE_HANDLED_BY_BUILD TRUE
    CMAKE_ARGS 
    -DCMAKE_INSTALL_PREFIX:PATH=${LOCAL_INSTALL_DIR}
    -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
    -DCMAKE_OSX_ARCHITECTURES=${CMAKE_OSX_ARCHITECTURES_PACKED}
    -DCMAKE_POSITION_INDEPENDENT_CODE=ON
)

# CURL
ExternalProject_Add(
    CURL
    DEPENDS ZLIB
    URL ${CMAKE_CURRENT_SOURCE_DIR}/third_party/curl-7.87.0.zip
    CONFIGURE_HANDLED_BY_BUILD TRUE
    CMAKE_ARGS 
    -DCMAKE_INSTALL_PREFIX:PATH=${LOCAL_INSTALL_DIR}
    -DCMAKE_PREFIX_PATH=${LOCAL_INSTALL_DIR}
    -DCMAKE_DEBUG_POSTFIX=${} # Do not append "d" to the library name when building in debug mode
    -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
    -DCMAKE_POSITION_INDEPENDENT_CODE=ON
    -DBUILD_SHARED_LIBS=OFF
    -DHTTP_ONLY=ON
    # Disable some defaults for now
    -DCURL_USE_LIBSSH2=OFF
    -DCURL_USE_LIBPSL=OFF
    -DCURL_USE_LIBSSH=OFF
    -DOPENSSL_USE_STATIC_LIBS=TRUE # Propagate to FindOpenSSL.cmake
)

# PROJ
ExternalProject_Add(
    PROJ
    DEPENDS SQLITE3 ZLIB
    URL ${CMAKE_CURRENT_SOURCE_DIR}/third_party/proj-9.1.1.zip
    CONFIGURE_HANDLED_BY_BUILD TRUE
    CMAKE_ARGS
    # CMake options
    -DCMAKE_PREFIX_PATH=${LOCAL_INSTALL_DIR}
    -DCMAKE_INSTALL_PREFIX:PATH=${LOCAL_INSTALL_DIR}
    -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
    -DCMAKE_OSX_ARCHITECTURES=${CMAKE_OSX_ARCHITECTURES_PACKED}
    -DCMAKE_POSITION_INDEPENDENT_CODE=ON
    # PROJ options
    -DBUILD_SHARED_LIBS=OFF
    -DBUILD_APPS=OFF
    -DBUILD_TESTING=OFF
    -DENABLE_CURL=OFF
    -DENABLE_TIFF=OFF
)

# EXPAT
ExternalProject_Add(
    EXPAT
    URL ${CMAKE_CURRENT_SOURCE_DIR}/third_party/expat-2.5.0.tar.bz2
    CONFIGURE_HANDLED_BY_BUILD TRUE
    CMAKE_ARGS 
    # CMake options
    -DCMAKE_INSTALL_PREFIX:PATH=${LOCAL_INSTALL_DIR}
    -DCMAKE_PREFIX_PATH=${LOCAL_INSTALL_DIR}
    -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
    -DCMAKE_OSX_ARCHITECTURES=${CMAKE_OSX_ARCHITECTURES_PACKED}
    -DCMAKE_POSITION_INDEPENDENT_CODE=ON
    # EXPAT options
    -DEXPAT_SHARED_LIBS=OFF
    -DEXPAT_BUILD_TESTS=OFF
    -DEXPAT_BUILD_EXAMPLES=OFF
    -DEXPAT_BUILD_FUZZERS=OFF
    -DEXPAT_BUILD_DOCS=OFF
)


# GEOS
ExternalProject_Add(
    GEOS
    URL ${CMAKE_CURRENT_SOURCE_DIR}/third_party/geos-3.11.2.tar.bz2
    CONFIGURE_HANDLED_BY_BUILD TRUE
    CMAKE_ARGS 
    # CMake options
    -DCMAKE_INSTALL_PREFIX:PATH=${LOCAL_INSTALL_DIR}
    -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
    -DCMAKE_OSX_ARCHITECTURES=${CMAKE_OSX_ARCHITECTURES_PACKED}
    -DCMAKE_POSITION_INDEPENDENT_CODE=ON
    # GEOS options
    -DBUILD_SHARED_LIBS=OFF
    -DBUILD_TESTING=OFF
    -DBUILD_DOCUMENTATION=OFF
    -DBUILD_ASTYLE=OFF
    -DBUILD_GEOSOP=OFF
)

# GDAL
ExternalProject_Add(
    GDAL
    DEPENDS PROJ GEOS EXPAT SQLITE3 ZLIB
    URL ${CMAKE_CURRENT_SOURCE_DIR}/third_party/gdal363.zip
    CONFIGURE_HANDLED_BY_BUILD TRUE
    CMAKE_ARGS 
    # CMake options
    -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
    -DCMAKE_OSX_ARCHITECTURES=${CMAKE_OSX_ARCHITECTURES_PACKED}
    -DCMAKE_INSTALL_PREFIX:PATH=${LOCAL_INSTALL_DIR}
    -DCMAKE_PREFIX_PATH=${LOCAL_INSTALL_DIR}
    -DCMAKE_MODULE_PATH=${LOCAL_INSTALL_DIR}/lib/cmake
    -DCMAKE_POSITION_INDEPENDENT_CODE=ON
    -DCMAKE_FIND_ROOT_PATH=${LOCAL_INSTALL_DIR}
    # GDAL Options
    -DGDAL_OBJECT_LIBRARIES_POSITION_INDEPENDENT_CODE=ON # this is needed for GDAL to build with -fPIC
    -DBUILD_TESTING=OFF
    -DBUILD_APPS=OFF
    # Build static library
    -DBUILD_SHARED_LIBS=OFF
    
    # Arrow
    -DGDAL_USE_ARROW=OFF
    -DARROW_USE_STATIC_LIBRARIES=OFF

    # Disable all external drivers unless explicitly enabled
    -DGDAL_USE_EXTERNAL_LIBS=OFF
    -DGDAL_USE_INTERNAL_LIBS=ON

    # Supported drivers
    -DGDAL_USE_GEOS=ON
    -DGDAL_USE_SQLITE3=ON
    -DGDAL_USE_EXPAT=ON
    -DGDAL_USE_CURL=ON
    -DGDAL_USE_OPENSSL=ON
    -DOPENSSL_USE_STATIC_LIBS=TRUE # Propagate to FindOpenSSL.cmake
    
    # This is not true, but a bug in gdal's cmake files
    -DACCEPT_MISSING_SQLITE3_RTREE:BOOL=ON
    -DACCEPT_MISSING_SQLITE3_MUTEX_ALLOC:BOOL=ON

    # remove optional gdal drivers
    -DGDAL_BUILD_OPTIONAL_DRIVERS=OFF
    -DOGR_BUILD_OPTIONAL_DRIVERS=ON

    # Remove bindings
    -DBUILD_PYTHON_BINDINGS=OFF
)


# Ouch! Remember that the order of these libraries is important! (reverse order of dependencies)
#target_link_libraries(dependencies INTERFACE gdal geos_c geos proj expat memvfs sqlite3 zlib)
