cmake_minimum_required(VERSION 3.20)

project(dependecies-build)

# Install and build dependencies locally
include(ExternalProject)
set(LOCAL_INSTALL_DIR ${CMAKE_CURRENT_BINARY_DIR}/local)
set_directory_properties(PROPERTIES EP_BASE ${CMAKE_CURRENT_BINARY_DIR}/base)

set(CMAKE_CXX_STANDARD 11)

# SQLite3
ExternalProject_Add(
    SQLITE3
    URL ${CMAKE_CURRENT_SOURCE_DIR}/third_party/sqlite3.zip
    CONFIGURE_HANDLED_BY_BUILD TRUE
    BUILD_BYPRODUCTS 
        ${LOCAL_INSTALL_DIR}/lib/libsqlite3${CMAKE_STATIC_LIBRARY_SUFFIX}
        ${LOCAL_INSTALL_DIR}/lib/libmemvfs${CMAKE_STATIC_LIBRARY_SUFFIX}
    CMAKE_ARGS 
    -DCMAKE_INSTALL_PREFIX:PATH=${LOCAL_INSTALL_DIR}
    -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
    -DCMAKE_POSITION_INDEPENDENT_CODE=ON
)

# ZLIB
ExternalProject_Add(
    ZLIB
    URL ${CMAKE_CURRENT_SOURCE_DIR}/third_party/zlib1213.zip
    CONFIGURE_HANDLED_BY_BUILD TRUE
    BUILD_BYPRODUCTS ${LOCAL_INSTALL_DIR}/lib/libz${CMAKE_STATIC_LIBRARY_SUFFIX}
    CMAKE_ARGS
    -DCMAKE_INSTALL_PREFIX:PATH=${LOCAL_INSTALL_DIR}
    -DCMAKE_PREFIX_PATH=${LOCAL_INSTALL_DIR}
    -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
    -DCMAKE_POSITION_INDEPENDENT_CODE=ON
    -DBUILD_SHARED_LIBS=OFF
)

# PROJ
ExternalProject_Add(
    PROJ
    DEPENDS SQLITE3
    URL ${CMAKE_CURRENT_SOURCE_DIR}/third_party/proj-9.1.1.zip
    CONFIGURE_HANDLED_BY_BUILD TRUE
    BUILD_BYPRODUCTS ${LOCAL_INSTALL_DIR}/lib/libproj${CMAKE_STATIC_LIBRARY_SUFFIX} # otherwise ninja gets confused
    CMAKE_ARGS
    # CMake options
    -DCMAKE_INSTALL_PREFIX:PATH=${LOCAL_INSTALL_DIR}
    -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
    -DCMAKE_PREFIX_PATH=${LOCAL_INSTALL_DIR}
    -DCMAKE_POSITION_INDEPENDENT_CODE=ON
    # PROJ options
    -DBUILD_SHARED_LIBS=OFF
    -DBUILD_APPS=OFF
    -DBUILD_TESTING=OFF
    -DENABLE_CURL=OFF
    -DENABLE_TIFF=OFF
)

# EXPAT
ExternalProject_Add(
    EXPAT
    URL ${CMAKE_CURRENT_SOURCE_DIR}/third_party/expat-2.5.0.tar.bz2
    CONFIGURE_HANDLED_BY_BUILD TRUE
    BUILD_BYPRODUCTS ${LOCAL_INSTALL_DIR}/lib/libexpat${CMAKE_STATIC_LIBRARY_SUFFIX}
    CMAKE_ARGS 
    # CMake options
    -DCMAKE_INSTALL_PREFIX:PATH=${LOCAL_INSTALL_DIR}
    -DCMAKE_PREFIX_PATH=${LOCAL_INSTALL_DIR}
    -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
    -DCMAKE_POSITION_INDEPENDENT_CODE=ON
    # EXPAT options
    -DEXPAT_SHARED_LIBS=OFF
    -DEXPAT_BUILD_TESTS=OFF
    -DEXPAT_BUILD_EXAMPLES=OFF
    -DEXPAT_BUILD_FUZZERS=OFF
    -DEXPAT_BUILD_DOCS=OFF
)

# OpenSSL
ExternalProject_Add(
    OPENSSL
    DEPENDS ZLIB
    URL ${CMAKE_CURRENT_SOURCE_DIR}/third_party/openssl-openssl-3.0.7.zip
    BUILD_IN_SOURCE 1
    CONFIGURE_COMMAND ./Configure --prefix=${LOCAL_INSTALL_DIR} --libdir=lib --openssldir=${LOCAL_INSTALL_DIR} no-shared no-asm
    BUILD_COMMAND make build_libs
    INSTALL_COMMAND make install_sw
    BUILD_BYPRODUCTS ${LOCAL_INSTALL_DIR}/lib/libcrypto${CMAKE_STATIC_LIBRARY_SUFFIX}  ${LOCAL_INSTALL_DIR}/lib/libssl${CMAKE_STATIC_LIBRARY_SUFFIX}
)

# CURL
ExternalProject_Add(
    CURL
    DEPENDS OPENSSL
    URL ${CMAKE_CURRENT_SOURCE_DIR}/third_party/curl-7.87.0.zip
    CONFIGURE_HANDLED_BY_BUILD TRUE
    BUILD_BYPRODUCTS ${LOCAL_INSTALL_DIR}/lib/libcurl${CMAKE_STATIC_LIBRARY_SUFFIX}
    CMAKE_ARGS
    -DCMAKE_INSTALL_PREFIX:PATH=${LOCAL_INSTALL_DIR}
    -DCMAKE_PREFIX_PATH=${LOCAL_INSTALL_DIR}
    -DCMAKE_DEBUG_POSTFIX=${} # Do not append "d" to the library name when building in debug mode
    -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
    -DCMAKE_POSITION_INDEPENDENT_CODE=ON
    -DBUILD_SHARED_LIBS=OFF
    -DHTTP_ONLY=ON
    # Disable some defaults for now
    -DCURL_USE_LIBSSH2=OFF
    -DCURL_USE_LIBPSL=OFF
    -DCURL_USE_LIBSSH=OFF
    -DOPENSSL_USE_STATIC_LIBS=TRUE # Propagate to FindOpenSSL.cmake
    -DOPENSSL_ROOT_DIR=${LOCAL_INSTALL_DIR}
    -DOpenSSL_ROOT=${LOCAL_INSTALL_DIR}
)

ExternalProject_Add(
    GEOS
    DEPENDS CURL
    GIT_REPOSITORY "https://github.com/Maxxen/geos.git"
    # GEOS now requires c++14, but this commit fixes a build bug an and is still c++11
    # At some point we should fork..? Or go back and use the stable c api.
    GIT_TAG "312f771f997dd1023ad264c08773756bf76c1f57"
    GIT_SHALLOW TRUE
    UPDATE_DISCONNECTED TRUE
    CONFIGURE_HANDLED_BY_BUILD TRUE
    BUILD_BYPRODUCTS 
        ${LOCAL_INSTALL_DIR}/lib/libgeos_c${CMAKE_STATIC_LIBRARY_SUFFIX}
        ${LOCAL_INSTALL_DIR}/lib/libgeos${CMAKE_STATIC_LIBRARY_SUFFIX}
    CMAKE_ARGS 
    # CMake options
    -DCMAKE_INSTALL_PREFIX:PATH=${LOCAL_INSTALL_DIR}
    -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
    -DCMAKE_POSITION_INDEPENDENT_CODE=ON
    # GEOS options
    -DBUILD_SHARED_LIBS=OFF
    -DBUILD_TESTING=OFF
    -DBUILD_DOCUMENTATION=OFF
    -DBUILD_ASTYLE=OFF
    -DBUILD_GEOSOP=OFF
)

# GDAL
ExternalProject_Add(
    GDAL
    DEPENDS PROJ GEOS CURL EXPAT SQLITE3 OPENSSL
    GIT_REPOSITORY "https://github.com/OSGeo/gdal.git"
    GIT_TAG "release/3.6" # TODO: Change this next release
    GIT_SHALLOW TRUE
    UPDATE_DISCONNECTED TRUE
    CONFIGURE_HANDLED_BY_BUILD TRUE
    # PATCH_COMMAND git apply ${CMAKE_CURRENT_SOURCE_DIR}/third_party/find_sqlite3.patch # Patch this until we can get it merged
    BUILD_BYPRODUCTS ${LOCAL_INSTALL_DIR}/lib/libgdal${CMAKE_STATIC_LIBRARY_SUFFIX}
    CMAKE_ARGS 
    # CMake options
    -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
    -DCMAKE_INSTALL_PREFIX:PATH=${LOCAL_INSTALL_DIR}
    -DCMAKE_PREFIX_PATH=${LOCAL_INSTALL_DIR}
    -DCMAKE_MODULE_PATH=${LOCAL_INSTALL_DIR}/lib/cmake
    -DCMAKE_POSITION_INDEPENDENT_CODE=ON
    -DCMAKE_FIND_ROOT_PATH=${LOCAL_INSTALL_DIR}
    # GDAL Options
    -DGDAL_OBJECT_LIBRARIES_POSITION_INDEPENDENT_CODE=ON # this is needed for GDAL to build with -fPIC
    -DBUILD_TESTING=OFF
    -DBUILD_APPS=OFF
    # Build static library
    -DBUILD_SHARED_LIBS=OFF
    # Disable apps
    -DBUILD_APPS=OFF
    
    # Arrow
    -DGDAL_USE_ARROW=OFF
    -DARROW_USE_STATIC_LIBRARIES=OFF

    # Disable all external drivers unless explicitly enabled
    -DGDAL_USE_EXTERNAL_LIBS=OFF
    -DGDAL_USE_INTERNAL_LIBS=ON

    # Supported drivers
    -DGDAL_USE_GEOS=ON
    -DGDAL_USE_SQLITE3=ON
    -DGDAL_USE_EXPAT=ON
    -DGDAL_USE_CURL=ON
    -DGDAL_USE_OPENSSL=ON
    -DOPENSSL_ROOT_DIR=${LOCAL_INSTALL_DIR}
    -DOPENSSL_USE_STATIC_LIBS=TRUE # Propagate to FindOpenSSL.cmake
    
    # This is not true, but a bug in gdal's cmake files
    -DACCEPT_MISSING_SQLITE3_RTREE:BOOL=ON
    -DACCEPT_MISSING_SQLITE3_MUTEX_ALLOC:BOOL=ON

    # remove optional gdal drivers
    -DGDAL_BUILD_OPTIONAL_DRIVERS=OFF
    -DOGR_BUILD_OPTIONAL_DRIVERS=ON

    # Remove bindings
    -DBUILD_PYTHON_BINDINGS=OFF
)


# proj
add_library(proj STATIC IMPORTED)
set_property(TARGET proj PROPERTY IMPORTED_LOCATION ${LOCAL_INSTALL_DIR}/lib/libproj${CMAKE_STATIC_LIBRARY_SUFFIX})
set_property(TARGET proj PROPERTY INTERFACE_INCLUDE_DIRECTORIES ${LOCAL_INSTALL_DIR}/include)

# sqlite3
add_library(sqlite3 STATIC IMPORTED)
set_property(TARGET sqlite3 PROPERTY IMPORTED_LOCATION ${LOCAL_INSTALL_DIR}/lib/libsqlite3${CMAKE_STATIC_LIBRARY_SUFFIX})
set_property(TARGET sqlite3 PROPERTY INTERFACE_INCLUDE_DIRECTORIES ${LOCAL_INSTALL_DIR}/include)

# sqlite3_memvfs
add_library(memvfs STATIC IMPORTED)
set_property(TARGET memvfs PROPERTY IMPORTED_LOCATION ${LOCAL_INSTALL_DIR}/lib/libmemvfs${CMAKE_STATIC_LIBRARY_SUFFIX})

# zlib
add_library(zlib STATIC IMPORTED)
set_property(TARGET zlib PROPERTY IMPORTED_LOCATION ${LOCAL_INSTALL_DIR}/lib/libz${CMAKE_STATIC_LIBRARY_SUFFIX})
set_property(TARGET zlib PROPERTY INTERFACE_INCLUDE_DIRECTORIES ${LOCAL_INSTALL_DIR}/include)

# expat
add_library(expat STATIC IMPORTED)
set_property(TARGET expat PROPERTY IMPORTED_LOCATION ${LOCAL_INSTALL_DIR}/lib/libexpat${CMAKE_STATIC_LIBRARY_SUFFIX})
set_property(TARGET expat PROPERTY INTERFACE_INCLUDE_DIRECTORIES ${LOCAL_INSTALL_DIR}/include)

# openssl-crypto
add_library(openssl-crypto STATIC IMPORTED)
set_property(TARGET openssl-crypto PROPERTY IMPORTED_LOCATION ${LOCAL_INSTALL_DIR}/lib/libcrypto${CMAKE_STATIC_LIBRARY_SUFFIX})
set_property(TARGET openssl-crypto PROPERTY INTERFACE_INCLUDE_DIRECTORIES ${LOCAL_INSTALL_DIR}/include)

# openssl-ssl
add_library(openssl-ssl STATIC IMPORTED)
set_property(TARGET openssl-ssl PROPERTY IMPORTED_LOCATION ${LOCAL_INSTALL_DIR}/lib/libssl${CMAKE_STATIC_LIBRARY_SUFFIX})
set_property(TARGET openssl-ssl PROPERTY INTERFACE_INCLUDE_DIRECTORIES ${LOCAL_INSTALL_DIR}/include)

# curl
add_library(curl STATIC IMPORTED)
set_property(TARGET curl PROPERTY IMPORTED_LOCATION ${LOCAL_INSTALL_DIR}/lib/libcurl${CMAKE_STATIC_LIBRARY_SUFFIX})
set_property(TARGET curl PROPERTY INTERFACE_INCLUDE_DIRECTORIES ${LOCAL_INSTALL_DIR}/include)

# geos_c
add_library(geos_c STATIC IMPORTED)
set_property(TARGET geos_c PROPERTY IMPORTED_LOCATION ${LOCAL_INSTALL_DIR}/lib/libgeos_c${CMAKE_STATIC_LIBRARY_SUFFIX})
set_property(TARGET geos_c PROPERTY INTERFACE_INCLUDE_DIRECTORIES ${LOCAL_INSTALL_DIR}/include)

# geos
add_library(geos STATIC IMPORTED)
set_property(TARGET geos PROPERTY IMPORTED_LOCATION ${LOCAL_INSTALL_DIR}/lib/libgeos${CMAKE_STATIC_LIBRARY_SUFFIX})
set_property(TARGET geos PROPERTY INTERFACE_INCLUDE_DIRECTORIES ${LOCAL_INSTALL_DIR}/include)

# gdal
add_library(gdal STATIC IMPORTED)
set_property(TARGET gdal PROPERTY IMPORTED_LOCATION ${LOCAL_INSTALL_DIR}/lib/libgdal${CMAKE_STATIC_LIBRARY_SUFFIX})
set_property(TARGET gdal PROPERTY INTERFACE_INCLUDE_DIRECTORIES ${LOCAL_INSTALL_DIR}/include)


add_library(dependencies INTERFACE)
add_dependencies(dependencies SQLITE3 PROJ ZLIB EXPAT OPENSSL CURL GEOS GDAL)

# Ouch! Remember that the order of these libraries is important! (reverse order of dependencies)
target_link_libraries(dependencies INTERFACE gdal geos_c geos proj curl openssl-ssl openssl-crypto expat sqlite3 memvfs zlib)
target_include_directories(dependencies INTERFACE 
    $<BUILD_INTERFACE:${LOCAL_INSTALL_DIR}/include>  
    $<INSTALL_INTERFACE:include>
)